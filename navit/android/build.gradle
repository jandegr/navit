apply plugin: 'com.android.application'
apply plugin: 'checkstyle'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "org.navitproject.navit"
        minSdkVersion 9
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk { // because mips was a problem with ndk 14
              // and no need for, 'x86_64' and , 'armeabi' and , 'arm64-v8a'
            abiFilters 'x86', 'armeabi-v7a'
        }
        externalNativeBuild {
            cmake {
                arguments '-DUSE_PLUGINS=n', '-DBUILD_MAPTOOL=n', '-DXSL_PROCESSING=n', '-DSAMPLE_MAP=n'
            }
        }
        // https://github.com/googlesamples/android-ndk/blob/master/native-media/app/build.gradle
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        disable 'UnusedResources'
        abortOnError false
    }
    
    sourceSets {
	    	main {
		    	manifest.srcFile "AndroidManifest.xml"
			    java.srcDirs = ["src"]
			    resources.srcDirs = ["src"]
			    renderscript.srcDirs = ["src"]
			    res.srcDirs = ["res"]
            }
	}
    externalNativeBuild {
        cmake {
            path '../../CMakeLists.txt'
        }
    }
    
//    checkstyleMain {
//        sourceSets = [ rootProject.sourceSets.main ]
//    	configFile = rootProject.file('navit/android/google_checks.xml')
//	ignoreFailures = true
//        showViolations = true
//    }
     task checkstyleMain(type: Checkstyle){
        source 'src'
        configFile = rootProject.file('navit/android/google_checks.xml')
	ignoreFailures = true
        showViolations = true
	// empty classpath
       classpath = files()
     }
     checkstyle {
         toolVersion = '6.18'
     }
    applicationVariants.all { variant ->
        // create tasks to generate Javadocs
        task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
            source = variant.javaCompile.source
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

            // choose the destination that works best for you here
            // I chose this particular directory because Jenkins pulls reports 
            // from this directory already if you need to have the output 
            // folder be parameterized for the build variant, use
            // "build/outputs/docs/javadoc-${variant.name}/" instead and it'll 
            // be in `javadoc-productionRelease` for example
            destinationDir = file("build/outputs/docs/javadoc/")

            // the name that will appear in the docs
            title = rootProject.name

            verbose = true
	    
            // you will probably get errors from using the @annotations and 
            // the support library, so just turn off failing for errors
            failOnError false    
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    compile 'ch.acra:acra:4.9.2'
}
