version: 2
defaults: &defaults
  docker:
    - image: ubuntu:18.04
jobs:
  build_linux:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Id
          command: cat /etc/*release
      - run:
          name: Setup requirements
          command: |
            bash scripts/setup_common_requirements.sh
            apt-get install -y libpng-dev libfreetype6-dev libdbus-glib-1-dev libgtk2.0-dev curl
      - run:
          name: Build for Linux
          command: bash scripts/build_linux.sh
      - run:
          name: Get OSM data
          command: |
            bash scripts/get_OSM_data.sh
      - run:
          name: Maptool step 1
          command: bash ./bin/navit/maptool/maptool -P  -6 -n -k -s1 -e1 -i ~/europe-latest.osm.pbf $CIRCLE_ARTIFACTS/BFR.bin
          no_output_timeout: 120m
  build_android:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-28-ndk
    environment:
      JVM_OPTS: -Xmx3200m
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m -XX:+HeapDumpOnOutOfMemoryError"'
    steps:
      - checkout
      - run:
          name: Id
          command: cat /etc/*release
      - run:
          name: Install cmake gettext libsaxonb-java librsvg2-bin pkg-config libprotobuf-c-dev protobuf-c-compiler
          command: |
            sudo apt-get update
            sudo apt-get install -y cmake gettext libsaxonb-java librsvg2-bin pkg-config libprotobuf-c-dev protobuf-c-compiler
      - run:
          name: Install Android SDK components
          command: sdkmanager "cmake;3.6.4111459"
      - run:
          name: Build for Android
          command: bash scripts/build_android.sh
      - run:
          name: Run Lint Test
          command: |
            ln -s navit/navit.dtd navit.dtd
            mkdir /home/circleci/code/test-results
            ./gradlew lint test
      - run:
          name: Run CheckStyle Test
          command: ./gradlew checkstyleMain
      - run:
          name: Run Javadoc
          command: ./gradlew generateDebugJavadoc
      - store_artifacts:
          name: Store APK
          path: navit/android/build/outputs/apk
          destination: apk
      - store_artifacts:
          name: Store translations
          path: po
          destination: translations
      - store_artifacts:
          name: Store logs
          path: navit/android/build/outputs/logs
          destination: logs
      - store_artifacts:
          name: Store Javadoc
          path: navit/android/build/outputs/docs/javadoc
          destination: doc
      - store_artifacts:
          name: Store Lint reports
          path: navit/android/build/reports
          destination: reports
      - store_artifacts:
          name: Store checkstyle report
          path: /home/circleci/code/navit/android/checkstyle
          destination: reports
      - store_test_results:
          path: test-results
  build_win32:
    docker:
      - image: ubuntu:14.04
    steps:
      - checkout
      - run:
          name: Prepare the Windows build environment
          command: |
            apt-get update && xargs -a scripts/setup_14.04_requirements.list apt-get install -y
            apt-get install -y software-properties-common
            add-apt-repository -y ppa:george-edison55/cmake-3.x
            apt-get remove -y cmake
            apt-get install -y cmake3 mingw-w64 mingw-w64-tools default-jdk nsis libsaxonb-java curl
      - run:
          name: Build for Windows
          command: |
            bash scripts/build_win32.sh
      - store_artifacts:
          path: win32/navit.exe
  build_wince:
    docker:
      - image: navit/dockerfiles:wince
    steps:
      - checkout
      - run:
          name: Prepare the WinCE build environment
          command: |
            bash scripts/setup_wince.sh
      - run:
          name: Build for Windows CE
          command: bash scripts/build_wince.sh
      - store_artifacts:
          path: wince/output
  build_tomtom_plugin:
    <<: *defaults
    docker:
      - image: navit/tomtom-ng
    steps:
      - checkout
      - run:
          name: Setup common requirements
          command: |
            bash scripts/setup_common_requirements.sh
      - run:
          name: Build for Tomtom (plugin)
          command: |
            bash scripts/build_tomtom_plugin.sh
      - store_artifacts:
          path: /output
workflows:
  version: 2
  build_all:
    jobs:
      - build_linux
      - build_android
      - build_win32
      - build_wince
      - build_tomtom_plugin
